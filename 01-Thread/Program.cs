/*
- Потік — спрощена одиниця виконання (lightweight execution unit),
це послідовність команд, яка виконується всередині процесу.
- В одному процесі може існувати кілька потоків, і вони спільно використовують ресурси процесу, такі як пам’ять, відкриті дескриптори та контекст безпеки.
- Кожен потік має власний стек виконання, лічильник програм (Program Counter), який вказує адресу наступної команди для виконання, та набір регістрів процесора. 
Завдяки цьому потоки можуть виконувати код незалежно один від одного, навіть перебуваючи в межах одного процесу.

- Потоки ефективніше створювати та керувати ними, ніж процеси, завдяки спільним ресурсам, відсутності ізоляції пам’яті та швидшому перемиканню контексту, ніж між процесами.
 */
//ThreadStart - делегат, який представляє метод, що не приймає параметрів і не повертає значення = delegate void ThreadStart();
//ThreadStart threadStart = new ThreadStart(PrintLetters); // створення делегата, який посилається на метод PrintLetters
//Thread th = new Thread(threadStart); // створення нового потоку (#1), який виконує метод PrintLetters

Thread thread = new Thread(PrintLetters); // створення нового потоку, який виконує метод PrintLetters
thread.Start(); // запуск потоку,  метод PrintLetters почне виконуватись паралельно з основним потоком
//thread.Priority = ThreadPriority.Highest;  

for (int i = 0; i < 30; i++) // основний потік = Main thread
{
    Console.WriteLine($"Hello in main {i}");
    Thread.Sleep(100); // затримка основного потоку на 100 мс для наочності перемикання потоків для наочності
}
void PrintLetters() // метод, який буде виконуватися у вторинному (дочірньому) потоці
{
    for (char c = 'A'; c <= 'Z'; c++)
    {
        Console.WriteLine($"\t\t{c} in thread");
        Thread.Sleep(100); //затримка вторинного потоку на 100 мс для наочності перемикання потоків для наочності
    }
}

Console.WriteLine("____________End Main");