using System;
using System.Threading.Tasks;

/* Асинхронне програмування дозволяє почати операцію і не чекати її завершення, виконуючи інші дії паралельно.

Приклад із життя =  замовили їжу у ресторані, не просто сидимо, а займаємося іншими справами. 
Коли їжа готова, нам повідомляють
*/

/*
 ключові поняття
Task – об’єкт, що представляє роботу, яка виконується асинхронно.
async / await – ключові слова для зручного написання асинхронного коду.

Thread vs Task – Task може використовувати потоки з пулу потоків, не створюючи власний новий потік напряму

Пул потоків – набір готових до роботи потоків, які можна використовувати для виконання завдань без створення нових потоків.
*/

class Program
{
    static async Task Main() // Пишемо async, бо використовуємо await всередині
    {
        Console.WriteLine("Початок завдання тривалого завдання");
        await LongOperationAsync(); // асинхронна операція використовує await
        //var task =  LongOperationAsync(); // асинхронна операція використовує await
        //await task; // чекаємо завершення тривалої операції
        Console.WriteLine("Велике завдання завершено");
    }

    static async Task LongOperationAsync() // метод повертає Task, бо він асинхронний, прийнято називати методи з async суфіксом Async
    {
        Console.WriteLine("Старт завантаження...");
        await Task.Delay(3000); // імітація довгої роботи без блокування потоку
        Console.WriteLine("Завершено завантаження!");
    }

}
